//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/PongInputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PongInputs : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PongInputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PongInputs"",
    ""maps"": [
        {
            ""name"": ""RaquetteLeft"",
            ""id"": ""e70dcf52-38db-4ced-a0ff-78437f8acd75"",
            ""actions"": [
                {
                    ""name"": ""Up"",
                    ""type"": ""Button"",
                    ""id"": ""a54d95db-0f7a-4417-9724-3e86001f2d60"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Down"",
                    ""type"": ""Button"",
                    ""id"": ""cb8a995c-527a-45ab-a1b9-5e2747f4aa8f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""336d8a75-76c3-44be-8f38-fe30ec732ce8"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Up"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""20ec6363-6b21-434d-9413-77a3c1ee9e86"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""RaquetteRight"",
            ""id"": ""ac416db8-a981-4a4e-aabc-7ec29ce5d914"",
            ""actions"": [
                {
                    ""name"": ""Up"",
                    ""type"": ""Button"",
                    ""id"": ""a790c3ea-afcf-4117-a07d-5c7410836ba5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Down"",
                    ""type"": ""Button"",
                    ""id"": ""c004ec96-70aa-4e03-af2d-57952d1dd13f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""978262b5-0bc2-4a75-b840-71b9d223ee8f"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Up"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""894a2424-a62d-417a-93c6-345a329d0896"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Actions"",
            ""id"": ""93418d36-2847-4a88-afd1-7265389d2dda"",
            ""actions"": [
                {
                    ""name"": ""Restart"",
                    ""type"": ""Button"",
                    ""id"": ""df8368fe-9f7f-4f24-a3a0-4d18943686f7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""13cf8a99-4f87-43a5-b40c-daa92c6fc192"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""2595d300-5008-4e5d-89e0-8ca1ca0e046c"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Restart"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""58adc99a-c6be-4f14-bf37-e50777208402"",
                    ""path"": ""<Keyboard>/p"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1d9d5d63-e0bc-4197-b015-e874a736d482"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // RaquetteLeft
        m_RaquetteLeft = asset.FindActionMap("RaquetteLeft", throwIfNotFound: true);
        m_RaquetteLeft_Up = m_RaquetteLeft.FindAction("Up", throwIfNotFound: true);
        m_RaquetteLeft_Down = m_RaquetteLeft.FindAction("Down", throwIfNotFound: true);
        // RaquetteRight
        m_RaquetteRight = asset.FindActionMap("RaquetteRight", throwIfNotFound: true);
        m_RaquetteRight_Up = m_RaquetteRight.FindAction("Up", throwIfNotFound: true);
        m_RaquetteRight_Down = m_RaquetteRight.FindAction("Down", throwIfNotFound: true);
        // Actions
        m_Actions = asset.FindActionMap("Actions", throwIfNotFound: true);
        m_Actions_Restart = m_Actions.FindAction("Restart", throwIfNotFound: true);
        m_Actions_Pause = m_Actions.FindAction("Pause", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // RaquetteLeft
    private readonly InputActionMap m_RaquetteLeft;
    private IRaquetteLeftActions m_RaquetteLeftActionsCallbackInterface;
    private readonly InputAction m_RaquetteLeft_Up;
    private readonly InputAction m_RaquetteLeft_Down;
    public struct RaquetteLeftActions
    {
        private @PongInputs m_Wrapper;
        public RaquetteLeftActions(@PongInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Up => m_Wrapper.m_RaquetteLeft_Up;
        public InputAction @Down => m_Wrapper.m_RaquetteLeft_Down;
        public InputActionMap Get() { return m_Wrapper.m_RaquetteLeft; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(RaquetteLeftActions set) { return set.Get(); }
        public void SetCallbacks(IRaquetteLeftActions instance)
        {
            if (m_Wrapper.m_RaquetteLeftActionsCallbackInterface != null)
            {
                @Up.started -= m_Wrapper.m_RaquetteLeftActionsCallbackInterface.OnUp;
                @Up.performed -= m_Wrapper.m_RaquetteLeftActionsCallbackInterface.OnUp;
                @Up.canceled -= m_Wrapper.m_RaquetteLeftActionsCallbackInterface.OnUp;
                @Down.started -= m_Wrapper.m_RaquetteLeftActionsCallbackInterface.OnDown;
                @Down.performed -= m_Wrapper.m_RaquetteLeftActionsCallbackInterface.OnDown;
                @Down.canceled -= m_Wrapper.m_RaquetteLeftActionsCallbackInterface.OnDown;
            }
            m_Wrapper.m_RaquetteLeftActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Up.started += instance.OnUp;
                @Up.performed += instance.OnUp;
                @Up.canceled += instance.OnUp;
                @Down.started += instance.OnDown;
                @Down.performed += instance.OnDown;
                @Down.canceled += instance.OnDown;
            }
        }
    }
    public RaquetteLeftActions @RaquetteLeft => new RaquetteLeftActions(this);

    // RaquetteRight
    private readonly InputActionMap m_RaquetteRight;
    private IRaquetteRightActions m_RaquetteRightActionsCallbackInterface;
    private readonly InputAction m_RaquetteRight_Up;
    private readonly InputAction m_RaquetteRight_Down;
    public struct RaquetteRightActions
    {
        private @PongInputs m_Wrapper;
        public RaquetteRightActions(@PongInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Up => m_Wrapper.m_RaquetteRight_Up;
        public InputAction @Down => m_Wrapper.m_RaquetteRight_Down;
        public InputActionMap Get() { return m_Wrapper.m_RaquetteRight; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(RaquetteRightActions set) { return set.Get(); }
        public void SetCallbacks(IRaquetteRightActions instance)
        {
            if (m_Wrapper.m_RaquetteRightActionsCallbackInterface != null)
            {
                @Up.started -= m_Wrapper.m_RaquetteRightActionsCallbackInterface.OnUp;
                @Up.performed -= m_Wrapper.m_RaquetteRightActionsCallbackInterface.OnUp;
                @Up.canceled -= m_Wrapper.m_RaquetteRightActionsCallbackInterface.OnUp;
                @Down.started -= m_Wrapper.m_RaquetteRightActionsCallbackInterface.OnDown;
                @Down.performed -= m_Wrapper.m_RaquetteRightActionsCallbackInterface.OnDown;
                @Down.canceled -= m_Wrapper.m_RaquetteRightActionsCallbackInterface.OnDown;
            }
            m_Wrapper.m_RaquetteRightActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Up.started += instance.OnUp;
                @Up.performed += instance.OnUp;
                @Up.canceled += instance.OnUp;
                @Down.started += instance.OnDown;
                @Down.performed += instance.OnDown;
                @Down.canceled += instance.OnDown;
            }
        }
    }
    public RaquetteRightActions @RaquetteRight => new RaquetteRightActions(this);

    // Actions
    private readonly InputActionMap m_Actions;
    private IActionsActions m_ActionsActionsCallbackInterface;
    private readonly InputAction m_Actions_Restart;
    private readonly InputAction m_Actions_Pause;
    public struct ActionsActions
    {
        private @PongInputs m_Wrapper;
        public ActionsActions(@PongInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Restart => m_Wrapper.m_Actions_Restart;
        public InputAction @Pause => m_Wrapper.m_Actions_Pause;
        public InputActionMap Get() { return m_Wrapper.m_Actions; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ActionsActions set) { return set.Get(); }
        public void SetCallbacks(IActionsActions instance)
        {
            if (m_Wrapper.m_ActionsActionsCallbackInterface != null)
            {
                @Restart.started -= m_Wrapper.m_ActionsActionsCallbackInterface.OnRestart;
                @Restart.performed -= m_Wrapper.m_ActionsActionsCallbackInterface.OnRestart;
                @Restart.canceled -= m_Wrapper.m_ActionsActionsCallbackInterface.OnRestart;
                @Pause.started -= m_Wrapper.m_ActionsActionsCallbackInterface.OnPause;
                @Pause.performed -= m_Wrapper.m_ActionsActionsCallbackInterface.OnPause;
                @Pause.canceled -= m_Wrapper.m_ActionsActionsCallbackInterface.OnPause;
            }
            m_Wrapper.m_ActionsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Restart.started += instance.OnRestart;
                @Restart.performed += instance.OnRestart;
                @Restart.canceled += instance.OnRestart;
                @Pause.started += instance.OnPause;
                @Pause.performed += instance.OnPause;
                @Pause.canceled += instance.OnPause;
            }
        }
    }
    public ActionsActions @Actions => new ActionsActions(this);
    public interface IRaquetteLeftActions
    {
        void OnUp(InputAction.CallbackContext context);
        void OnDown(InputAction.CallbackContext context);
    }
    public interface IRaquetteRightActions
    {
        void OnUp(InputAction.CallbackContext context);
        void OnDown(InputAction.CallbackContext context);
    }
    public interface IActionsActions
    {
        void OnRestart(InputAction.CallbackContext context);
        void OnPause(InputAction.CallbackContext context);
    }
}
